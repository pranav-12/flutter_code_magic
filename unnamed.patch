Index: codemagic.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/codemagic.yaml b/codemagic.yaml
--- a/codemagic.yaml	(revision 0af43f87ce97215e08ad4691cc27eb66be851bb4)
+++ b/codemagic.yaml	(revision 7950eedc8960114d026a37df0b13321da10a3e22)
@@ -1,24 +1,8 @@
-# Flutter Code Magic - Codemagic CI/CD Configuration
+# Codemagic Configuration for Flutter Code Magic
+# Documentation: https://docs.codemagic.io/
 #
-# Required Environment Variables in Codemagic:
-# 
-# Google Drive Integration:
-# - GOOGLE_DRIVE_SERVICE_ACCOUNT: Service account JSON for Google Drive API
-#   Service Account Email: edge-app-cicd@codemagic-470112.iam.gserviceaccount.com
-# - GOOGLE_DRIVE_FOLDER_ID: Google Drive folder ID where files will be uploaded
-#   Folder ID: 1GNT1C0eOcg0hgsxr6lqIKx-LwZK77BBF
-#
-# Slack Integration:
-# - SLACK_WEBHOOK_URL: Slack webhook URL for notifications
-#
-# Diawi Integration (iOS only):
-# - DIAWI_TOKEN: Diawi API token for iOS app distribution
-#
-# Android Signing:
-# - SKIPPED: Using debug signing for development builds
-#
-# iOS Signing:
-# - SKIPPED: Using --no-codesign for development builds
+# üìã CREDENTIALS: See CREDENTIALS_CHECKLIST.md for all required environment variables\
+# üîß SETUP: Configure environment groups in Codemagic dashboard before running builds
 
 workflows:
   # ANDROID BUILD WORKFLOW
@@ -28,8 +12,8 @@
     max_build_duration: 60
     environment:
       groups:
-        - google_credentials  # Optional: for Google Drive uploads
-        - slack_credentials   # Optional: for Slack notifications
+        - google_credentials  # GOOGLE_DRIVE_SERVICE_ACCOUNT, GOOGLE_DRIVE_FOLDER_ID
+        - slack_credentials   # SLACK_WEBHOOK_URL (for custom integration)
       vars:
         PACKAGE_NAME: "com.example.flutter_code_magic"
       flutter: stable
@@ -44,180 +28,142 @@
           include: true
           source: true
         - pattern: 'develop'
-          include: true
-          source: true
-        - pattern: 'feature/*'
           include: true
           source: true
     scripts:
       - name: Extract version from pubspec.yaml
         script: |
-          # Extract version from pubspec.yaml
           FULL_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
           VERSION_NAME=$(echo $FULL_VERSION | cut -d '+' -f 1)
           VERSION_CODE=$(echo $FULL_VERSION | cut -d '+' -f 2)
-          
           echo "VERSION_NAME=$VERSION_NAME" >> $CM_ENV
           echo "VERSION_CODE=$VERSION_CODE" >> $CM_ENV
-          
           echo "üì¶ Building version: $VERSION_NAME+$VERSION_CODE"
-      - name: Set up local.properties
-        script: |
-          echo "flutter.versionName=$VERSION_NAME" > $CM_BUILD_DIR/android/local.properties
-          echo "flutter.versionCode=$VERSION_CODE" >> $CM_BUILD_DIR/android/local.properties
-      - name: Get Flutter packages
-        script: |
-          echo "üîß Getting Flutter packages..."
-          flutter pub get
-          echo "‚úÖ Flutter packages complete"
-      - name: Cache Gradle dependencies
-        script: |
-          echo "‚ö° Warming up Gradle cache..."
-          cd android && ./gradlew dependencies --quiet || echo "Gradle cache warmed up"
-      - name: Flutter analyze
-        script: |
-          echo "‚ö° Running quick analyze..."
-          flutter analyze --no-fatal-infos
-      - name: Flutter test  
-        script: |
-          echo "‚ö° Running tests..."
-          flutter test --reporter=compact
       - name: Build APK
         script: |
-          # Skip flutter clean to save time (only clean if necessary)
-          echo "‚ö° Fast APK build starting..."
-          
-          # Quick Flutter doctor check (no verbose)
-          flutter doctor
-          
-          # Build unsigned release APK with optimizations
-          echo "Building optimized release APK..."
           flutter build apk --release
-          
-          # If that fails, try without optimizations
-          if [ $? -ne 0 ]; then
-            echo "Optimized build failed, trying standard release..."
-            flutter build apk --release --no-shrink
-          fi
-          
-          # Final fallback to debug if release fails
-          if [ $? -ne 0 ]; then
-            echo "Release build failed, trying debug mode..."
-            flutter build apk --debug
-          fi
-          
-          # Check what APK was created
-          ls -la build/app/outputs/flutter-apk/
-          
-          # Find the APK file (could be app-debug.apk or app-release.apk)
-          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
-            echo "Found app-release.apk"
-            echo "APK_NAME=app-release.apk" >> $CM_ENV
-          elif [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
-            echo "Found app-debug.apk"
-            echo "APK_NAME=app-debug.apk" >> $CM_ENV
-          else
-            echo "No APK found!"
-            exit 1
-          fi
-      - name: Rename APK
-        script: |
           cd build/app/outputs/flutter-apk
-          # Use the APK name detected in previous step
-          mv $APK_NAME flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk
-          echo "‚úÖ Renamed $APK_NAME to flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk"
-      - name: Test APK (Basic validation)
-        script: |
-          APK_PATH="build/app/outputs/flutter-apk/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk"
-          if [ -f "$APK_PATH" ]; then
-            SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH" 2>/dev/null)
-            if [ $SIZE -gt 5000000 ]; then  # > 5MB
-              echo "‚úÖ APK validation passed - Size: $(($SIZE/1024/1024))MB"
-            else
-              echo "‚ùå APK validation failed - Size too small: $(($SIZE/1024/1024))MB"
-              exit 1
-            fi
-          else
-            echo "‚ùå APK not found at $APK_PATH"
+          if [ -f "app-release.apk" ]; then
+            mv app-release.apk flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk
+            echo "‚úÖ APK renamed successfully"
+          else
+            echo "‚ùå APK not found"
             exit 1
           fi
-      - name: Upload to Google Drive
-        script: |
-          # Install gdrive CLI tool
-          curl -L https://github.com/gdrive-org/gdrive/releases/download/2.1.1/gdrive_2.1.1_darwin_amd64.tar.gz | tar xz
-          sudo mv gdrive /usr/local/bin/
-          
-          # Authenticate with service account
-          echo "$GOOGLE_DRIVE_SERVICE_ACCOUNT" > service-account.json
-          gdrive account add --service-account service-account.json
-          
-          # Upload APK and get file ID
-          UPLOAD_OUTPUT=$(gdrive files upload build/app/outputs/flutter-apk/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk --parent $GOOGLE_DRIVE_FOLDER_ID)
-          FILE_ID=$(echo "$UPLOAD_OUTPUT" | grep "Uploaded" | awk '{print $2}')
-          DRIVE_LINK="https://drive.google.com/file/d/$FILE_ID/view"
-          echo "DRIVE_LINK=$DRIVE_LINK" >> $CM_ENV
-          echo "‚úÖ APK uploaded to Google Drive: $DRIVE_LINK"
-      - name: Send Slack notification
-        script: |
-          APK_PATH="build/app/outputs/flutter-apk/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk"
-          SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH" 2>/dev/null)
-          SIZE_MB=$(($SIZE/1024/1024))
-          
-          curl -X POST -H 'Content-type: application/json' \
-            --data "{
-              \"text\": \"üöÄ *Flutter Code Magic Android Build Completed*\",
-              \"blocks\": [
-                {
-                  \"type\": \"header\",
-                  \"text\": {
-                    \"type\": \"plain_text\",
-                    \"text\": \"üì± Flutter Code Magic Android v${VERSION_NAME}+${VERSION_CODE}\"
-                  }
-                },
-                {
-                  \"type\": \"section\",
-                  \"fields\": [
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Platform:* Android\"
-                    },
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Version:* ${VERSION_NAME}+${VERSION_CODE}\"
-                    },
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Size:* ${SIZE_MB}MB\"
-                    },
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Branch:* $CM_BRANCH\"
-                    }
-                  ]
-                },
-                {
-                  \"type\": \"section\",
-                  \"text\": {
-                    \"type\": \"mrkdwn\",
-                    \"text\": \"üìÅ *Google Drive:* <$DRIVE_LINK|Download APK>\\nüì± *File:* flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk\"
-                  }
-                }
-              ]
-            }" \
-            $SLACK_WEBHOOK_URL
-    artifacts:
-      - build/app/outputs/flutter-apk/*.apk
+          cd ../../../..
+    artifacts:
+      - build/app/outputs/flutter-apk/*.apk
+    publishing:
+      # CUSTOM SCRIPTS FOR GOOGLE DRIVE AND SLACK
+      scripts:
+        - name: Upload to Google Drive
+          script: |
+            if [ -z "$GOOGLE_DRIVE_SERVICE_ACCOUNT" ] || [ -z "$GOOGLE_DRIVE_FOLDER_ID" ]; then
+              echo "‚ö†Ô∏è Google Drive not configured"
+              exit 0
+            fi
+            
+            APK_FILE="flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk"
+            APK_PATH="build/app/outputs/flutter-apk/$APK_FILE"
+            ZIP_FILE="flutter_code_magic_android_v${VERSION_NAME}+${VERSION_CODE}.zip"
+            
+            # Create ZIP file with APK
+            echo "üì¶ Creating ZIP file..."
+            cd build/app/outputs/flutter-apk
+            zip "../../../$ZIP_FILE" "$APK_FILE"
+            cd ../../../..
+            
+            # Install gdrive tool
+            curl -L https://github.com/gdrive-org/gdrive/releases/download/2.1.1/gdrive_2.1.1_darwin_amd64.tar.gz | tar xz
+            sudo mv gdrive /usr/local/bin/
+            chmod +x /usr/local/bin/gdrive
+            
+            # Upload ZIP to Google Drive
+            echo "$GOOGLE_DRIVE_SERVICE_ACCOUNT" > service-account.json
+            gdrive account add --service-account service-account.json
+            
+            echo "üì§ Uploading $ZIP_FILE to Google Drive..."
+            UPLOAD_OUTPUT=$(gdrive files upload "$ZIP_FILE" --parent "$GOOGLE_DRIVE_FOLDER_ID" --share 2>&1)
+            echo "Upload result: $UPLOAD_OUTPUT"
+            
+            # Extract file ID for direct download link
+            FILE_ID=$(echo "$UPLOAD_OUTPUT" | grep -o 'Id: [^[:space:]]*' | cut -d' ' -f2 | head -1)
+            if [ -n "$FILE_ID" ]; then
+              # Make file publicly accessible
+              gdrive files share "$FILE_ID" --type anyone --role reader
+              echo "DRIVE_LINK=https://drive.google.com/uc?export=download&id=$FILE_ID" >> $CM_ENV
+              echo "‚úÖ Android ZIP uploaded and shared: $FILE_ID"
+              echo "üì• Direct download: https://drive.google.com/uc?export=download&id=$FILE_ID"
+            else
+              echo "DRIVE_LINK=https://drive.google.com/drive/folders/$GOOGLE_DRIVE_FOLDER_ID" >> $CM_ENV
+              echo "‚úÖ Android ZIP uploaded (using folder link)"
+            fi
+        - name: Send Slack notification
+          script: |
+            if [ -z "$SLACK_WEBHOOK_URL" ]; then
+              echo "‚ö†Ô∏è SLACK_WEBHOOK_URL not configured, skipping Slack notification"
+              exit 0
+            fi
+            
+            curl -X POST -H 'Content-type: application/json' \
+              --data "{
+                \"text\": \"üöÄ Flutter Code Magic Android Build Completed\",
+                \"blocks\": [
+                  {
+                    \"type\": \"header\",
+                    \"text\": {
+                      \"type\": \"plain_text\",
+                      \"text\": \"üì± Flutter Code Magic Android v${VERSION_NAME}+${VERSION_CODE}\"
+                    }
+                  },
+                  {
+                    \"type\": \"section\",
+                    \"fields\": [
+                      {
+                        \"type\": \"mrkdwn\",
+                        \"text\": \"*Platform:* Android\"
+                      },
+                      {
+                        \"type\": \"mrkdwn\",
+                        \"text\": \"*Version:* ${VERSION_NAME}+${VERSION_CODE}\"
+                      },
+                      {
+                        \"type\": \"mrkdwn\",
+                        \"text\": \"*Branch:* ${CM_BRANCH}\"
+                      },
+                      {
+                        \"type\": \"mrkdwn\",
+                        \"text\": \"*Status:* ‚úÖ Success\"
+                      }
+                    ]
+                  },
+                  {
+                    \"type\": \"section\",
+                    \"text\": {
+                      \"type\": \"mrkdwn\",
+                      \"text\": \"üì• *Download Links:*\\n‚Ä¢ üì¶ *Google Drive:* ${DRIVE_LINK}\\n‚Ä¢ üì± *APK File:* flutter_code_magic_android_v${VERSION_NAME}+${VERSION_CODE}.zip\"
+                    }
+                  }
+                ]
+              }" \
+              "$SLACK_WEBHOOK_URL"
+            
+            if [ $? -eq 0 ]; then
+              echo "‚úÖ Slack notification sent successfully"
+            else
+              echo "‚ùå Failed to send Slack notification"
+            fi
 
-  # iOS BUILD WORKFLOW
+  # iOS BUILD WORKFLOW  
   ios-workflow:
     name: iOS Build
     instance_type: mac_mini_m2
     max_build_duration: 60
     environment:
       groups:
-        - google_credentials  # Optional: for Google Drive uploads
-        - slack_credentials   # Optional: for Slack notifications
-        - diawi_credentials   # Optional: for Diawi distribution
+        - google_credentials
+        - slack_credentials
+        - diawi_credentials  # DIAWI_TOKEN
       vars:
         PACKAGE_NAME: "com.example.flutterCodeMagic"
         BUNDLE_ID: "com.example.flutterCodeMagic"
@@ -235,398 +181,156 @@
         - pattern: 'develop'
           include: true
           source: true
-        - pattern: 'feature/*'
-          include: true
-          source: true
     scripts:
       - name: Extract version from pubspec.yaml
         script: |
-          # Extract version from pubspec.yaml
           FULL_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
           VERSION_NAME=$(echo $FULL_VERSION | cut -d '+' -f 1)
           VERSION_CODE=$(echo $FULL_VERSION | cut -d '+' -f 2)
-          
           echo "VERSION_NAME=$VERSION_NAME" >> $CM_ENV
           echo "VERSION_CODE=$VERSION_CODE" >> $CM_ENV
-          
           echo "üì¶ Building version: $VERSION_NAME+$VERSION_CODE"
-      - name: Get Flutter packages
-        script: |
-          echo "üîß Getting Flutter packages..."
-          flutter pub get
-          echo "‚úÖ Flutter packages complete"
-      - name: Install CocoaPods dependencies
-        script: |
-          cd ios && pod install
-      - name: Flutter analyze
-        script: |
-          flutter analyze
-      - name: Flutter test
-        script: |
-          flutter test
       - name: Build iOS
         script: |
-          # Build iOS app without signing
           flutter build ios --release --no-codesign
-          
-          # Create ipa directory
           mkdir -p build/ios/ipa
-          
-          # Package the app as a simple zip (for distribution)
           cd build/ios/Release-iphoneos/
           zip -r ../ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa Runner.app
-          
-          echo "‚úÖ iOS app packaged as IPA"
-      - name: Test IPA (Basic validation)
-        script: |
-          IPA_PATH="build/ios/ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa"
-          if [ -f "$IPA_PATH" ]; then
-            SIZE=$(stat -f%z "$IPA_PATH" 2>/dev/null || stat -c%s "$IPA_PATH" 2>/dev/null)
-            if [ $SIZE -gt 5000000 ]; then  # > 5MB
-              echo "‚úÖ IPA validation passed - Size: $(($SIZE/1024/1024))MB"
-            else
-              echo "‚ùå IPA validation failed - Size too small: $(($SIZE/1024/1024))MB"
-              exit 1
-            fi
-          else
-            echo "‚ùå IPA not found at $IPA_PATH"
-            exit 1
-          fi
-      - name: Upload to Google Drive
-        script: |
-          # Install gdrive CLI tool
-          curl -L https://github.com/gdrive-org/gdrive/releases/download/2.1.1/gdrive_2.1.1_darwin_amd64.tar.gz | tar xz
-          sudo mv gdrive /usr/local/bin/
-          
-          # Authenticate with service account
-          echo "$GOOGLE_DRIVE_SERVICE_ACCOUNT" > service-account.json
-          gdrive account add --service-account service-account.json
-          
-          # Upload IPA and get file ID
-          UPLOAD_OUTPUT=$(gdrive files upload build/ios/ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa --parent $GOOGLE_DRIVE_FOLDER_ID)
-          FILE_ID=$(echo "$UPLOAD_OUTPUT" | grep "Uploaded" | awk '{print $2}')
-          DRIVE_LINK="https://drive.google.com/file/d/$FILE_ID/view"
-          echo "DRIVE_LINK=$DRIVE_LINK" >> $CM_ENV
-          echo "‚úÖ IPA uploaded to Google Drive: $DRIVE_LINK"
-      - name: Upload to Diawi
-        script: |
-          IPA_PATH="build/ios/ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa"
-          
-          # Upload to Diawi
-          RESPONSE=$(curl -F "token=$DIAWI_TOKEN" \
-                          -F "file=@$IPA_PATH" \
-                          -F "find_by_udid=1" \
-                          -F "wall_of_apps=1" \
-                          https://upload.diawi.com/)
-          
-          JOB_ID=$(echo $RESPONSE | grep -o '"job":"[^"]*' | cut -d'"' -f4)
-          echo "Diawi Job ID: $JOB_ID"
-          
-          # Wait for upload to complete and get link
-          sleep 30
-          for i in {1..10}; do
-            STATUS_RESPONSE=$(curl -s https://upload.diawi.com/status?token=$DIAWI_TOKEN\&job=$JOB_ID)
-            if echo $STATUS_RESPONSE | grep -q '"status":2000'; then
-              DIAWI_LINK=$(echo $STATUS_RESPONSE | grep -o '"link":"[^"]*' | cut -d'"' -f4)
-              echo "DIAWI_LINK=$DIAWI_LINK" >> $CM_ENV
-              break
-            fi
-            sleep 10
-          done
-      - name: Send Slack notification
-        script: |
-          IPA_PATH="build/ios/ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa"
-          SIZE=$(stat -f%z "$IPA_PATH" 2>/dev/null || stat -c%s "$IPA_PATH" 2>/dev/null)
-          SIZE_MB=$(($SIZE/1024/1024))
-          
-          DIAWI_TEXT=""
-          if [ ! -z "$DIAWI_LINK" ]; then
-            DIAWI_TEXT="üì≤ *Diawi Link:* <$DIAWI_LINK|Install on Device>\\n"
-          fi
-          
-          curl -X POST -H 'Content-type: application/json' \
-            --data "{
-              \"text\": \"üöÄ *Flutter Code Magic iOS Build Completed*\",
-              \"blocks\": [
-                {
-                  \"type\": \"header\",
-                  \"text\": {
-                    \"type\": \"plain_text\",
-                    \"text\": \"üì± Flutter Code Magic iOS v${VERSION_NAME}+${VERSION_CODE}\"
-                  }
-                },
-                {
-                  \"type\": \"section\",
-                  \"fields\": [
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Platform:* iOS\"
-                    },
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Version:* ${VERSION_NAME}+${VERSION_CODE}\"
-                    },
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Size:* ${SIZE_MB}MB\"
-                    },
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Branch:* $CM_BRANCH\"
-                    }
-                  ]
-                },
-                {
-                  \"type\": \"section\",
-                  \"text\": {
-                    \"type\": \"mrkdwn\",
-                    \"text\": \"üìÅ *Google Drive:* <$DRIVE_LINK|Download IPA>\\n${DIAWI_TEXT}üì± *File:* flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa\"
-                  }
-                }
-              ]
-            }" \
-            $SLACK_WEBHOOK_URL
-    artifacts:
-      - build/ios/ipa/*.ipa
-
-  # WEB BUILD WORKFLOW
-  web-workflow:
-    name: Web Build
-    instance_type: mac_mini_m2
-    max_build_duration: 60
-    environment:
-      groups:
-        - google_credentials  # Optional: for Google Drive uploads
-        - slack_credentials   # Optional: for Slack notifications
-      vars:
-        PACKAGE_NAME: "com.example.flutter_code_magic"
-      flutter: stable
-    triggering:
-      events:
-        - push
-        - pull_request
-      branch_patterns:
-        - pattern: 'main'
-          include: true
-          source: true
-        - pattern: 'develop'
-          include: true
-          source: true
-        - pattern: 'feature/*'
-          include: true
-          source: true
-    scripts:
-      - name: Extract version from pubspec.yaml
-        script: |
-          # Extract version from pubspec.yaml
-          FULL_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
-          VERSION_NAME=$(echo $FULL_VERSION | cut -d '+' -f 1)
-          VERSION_CODE=$(echo $FULL_VERSION | cut -d '+' -f 2)
-          
-          echo "VERSION_NAME=$VERSION_NAME" >> $CM_ENV
-          echo "VERSION_CODE=$VERSION_CODE" >> $CM_ENV
-          
-          echo "üì¶ Building version: $VERSION_NAME+$VERSION_CODE"
-      - name: Get Flutter packages
-        script: |
-          echo "üîß Getting Flutter packages..."
-          flutter pub get
-          echo "‚úÖ Flutter packages complete"
-      - name: Flutter analyze
-        script: |
-          flutter analyze
-      - name: Flutter test
-        script: |
-          flutter test
-      - name: Build Web
-        script: |
-          flutter build web --release
-      - name: Package Web Build
-        script: |
-          cd build/web
-          tar -czf ../flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz .
-      - name: Test Web Build
-        script: |
-          WEB_PATH="build/flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz"
-          if [ -f "$WEB_PATH" ]; then
-            SIZE=$(stat -f%z "$WEB_PATH" 2>/dev/null || stat -c%s "$WEB_PATH" 2>/dev/null)
-            if [ $SIZE -gt 500000 ]; then  # > 500KB
-              echo "‚úÖ Web build validation passed - Size: $(($SIZE/1024/1024))MB"
-            else
-              echo "‚ùå Web build validation failed - Size too small: $(($SIZE/1024))KB"
-              exit 1
-            fi
-          else
-            echo "‚ùå Web build not found at $WEB_PATH"
-            exit 1
-          fi
-      - name: Upload to Google Drive
-        script: |
-          # Install gdrive CLI tool
-          curl -L https://github.com/gdrive-org/gdrive/releases/download/2.1.1/gdrive_2.1.1_darwin_amd64.tar.gz | tar xz
-          sudo mv gdrive /usr/local/bin/
-          # Authenticate with service account
-          echo "$GOOGLE_DRIVE_SERVICE_ACCOUNT" > service-account.json
-          gdrive account add --service-account service-account.json
-          
-          # Upload Web build
-          gdrive files upload build/flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz --parent $GOOGLE_DRIVE_FOLDER_ID
-      - name: Send Slack notification
-        script: |
-          WEB_PATH="build/flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz"
-          SIZE=$(stat -f%z "$WEB_PATH" 2>/dev/null || stat -c%s "$WEB_PATH" 2>/dev/null)
-          SIZE_MB=$(($SIZE/1024/1024))
-          
-          curl -X POST -H 'Content-type: application/json' \
-            --data "{
-              \"text\": \"üöÄ *Flutter Code Magic Web Build Completed*\",
-              \"blocks\": [
-                {
-                  \"type\": \"header\",
-                  \"text\": {
-                    \"type\": \"plain_text\",
-                    \"text\": \"üåê Flutter Code Magic Web v${VERSION_NAME}+${VERSION_CODE}\"
-                  }
-                },
-                {
-                  \"type\": \"section\",
-                  \"fields\": [
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Platform:* Web\"
-                    },
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Version:* ${VERSION_NAME}+${VERSION_CODE}\"
-                    },
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Size:* ${SIZE_MB}MB\"
-                    },
-                    {
-                      \"type\": \"mrkdwn\",
-                      \"text\": \"*Branch:* $CM_BRANCH\"
-                    }
-                  ]
-                },
-                {
-                  \"type\": \"section\",
-                  \"text\": {
-                    \"type\": \"mrkdwn\",
-                    \"text\": \"üìÅ *Google Drive:* Web build uploaded successfully\\nüåê *File:* flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz\"
-                  }
-                }
-              ]
-            }" \
-            $SLACK_WEBHOOK_URL
-    artifacts:
-      - build/*.tar.gz
-
-  # COMBINED BUILD WORKFLOW (All platforms)
-  all-platforms:
-    name: Build All Platforms
-    instance_type: mac_mini_m2
-    max_build_duration: 120
-    environment:
-      groups:
-        - google_credentials  # Optional
-        - slack_credentials   # Optional
-        - diawi_credentials   # Optional
-      vars:
-        PACKAGE_NAME: "com.example.flutter_code_magic"
-        BUNDLE_ID: "com.example.flutterCodeMagic"
-      flutter: stable
-      xcode: latest
-      cocoapods: default
-    triggering:
-      events:
-        - tag  # Trigger on version tags
-      tag_patterns:
-        - pattern: 'v*'
-          include: true
-    scripts:
-      - name: Extract version from pubspec.yaml
-        script: |
-          FULL_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
-          VERSION_NAME=$(echo $FULL_VERSION | cut -d '+' -f 1)
-          VERSION_CODE=$(echo $FULL_VERSION | cut -d '+' -f 2)
-          
-          echo "VERSION_NAME=$VERSION_NAME" >> $CM_ENV
-          echo "VERSION_CODE=$VERSION_CODE" >> $CM_ENV
-          
-          echo "üì¶ Building all platforms for version: $VERSION_NAME+$VERSION_CODE"
-      - name: Get Flutter packages
-        script: |
-          echo "üîß Getting Flutter packages..."
-          flutter pub get
-          echo "‚úÖ Flutter packages complete"
-      - name: Flutter analyze
-        script: |
-          flutter analyze
-      - name: Flutter test
-        script: |
-          flutter test
-      - name: Build Android APK
-        script: |
-          echo "flutter.versionName=$VERSION_NAME" > $CM_BUILD_DIR/android/local.properties
-          echo "flutter.versionCode=$VERSION_CODE" >> $CM_BUILD_DIR/android/local.properties
-          
-          # Build unsigned release APK
-          flutter build apk --release --no-shrink
-          
-          cd build/app/outputs/flutter-apk
-          mv app-release.apk flutter_code_magic_android_v${VERSION_NAME}+${VERSION_CODE}.apk
-      - name: Build iOS
-        script: |
-          cd ios && pod install && cd ..
-          
-          # Build iOS app without signing
-          flutter build ios --release --no-codesign
-          
-          # Create ipa directory and package
-          mkdir -p build/ios/ipa
-          cd build/ios/Release-iphoneos/
-          zip -r ../ipa/flutter_code_magic_ios_v${VERSION_NAME}+${VERSION_CODE}.ipa Runner.app
-      - name: Build Web
-        script: |
-          flutter build web --release
-          cd build/web
-          tar -czf ../flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz .
-      - name: Validate All Builds
-        script: |
-          echo "‚úÖ Validating all builds..."
-          # Validate Android APK
-          APK_PATH="build/app/outputs/flutter-apk/flutter_code_magic_android_v${VERSION_NAME}+${VERSION_CODE}.apk"
-          if [ -f "$APK_PATH" ]; then
-            SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH" 2>/dev/null)
-            echo "‚úÖ Android APK: $(($SIZE/1024/1024))MB"
-          else
-            echo "‚ùå Android APK not found"
-            exit 1
-          fi
-          
-          # Validate iOS IPA
-          IPA_PATH="build/ios/ipa/flutter_code_magic_ios_v${VERSION_NAME}+${VERSION_CODE}.ipa"
-          if [ -f "$IPA_PATH" ]; then
-            SIZE=$(stat -f%z "$IPA_PATH" 2>/dev/null || stat -c%s "$IPA_PATH" 2>/dev/null)
-            echo "‚úÖ iOS IPA: $(($SIZE/1024/1024))MB"
-          else
-            echo "‚ùå iOS IPA not found"
-            exit 1
-          fi
-          
-          # Validate Web build
-          WEB_PATH="build/flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz"
-          if [ -f "$WEB_PATH" ]; then
-            SIZE=$(stat -f%z "$WEB_PATH" 2>/dev/null || stat -c%s "$WEB_PATH" 2>/dev/null)
-            echo "‚úÖ Web build: $(($SIZE/1024/1024))MB"
-          else
-            echo "‚ùå Web build not found"
-            exit 1
-          fi
-          
-          echo "üéâ All platforms built successfully!"
-    artifacts:
-      - build/app/outputs/flutter-apk/*.apk
-      - build/ios/ipa/*.ipa
-      - build/*.tar.gz
\ No newline at end of file
+          cd ../../../..
+          echo "‚úÖ iOS IPA created"
+    artifacts:
+      - build/ios/ipa/*.ipa
+    publishing:
+      # CUSTOM SCRIPTS FOR GOOGLE DRIVE, DIAWI AND SLACK
+      scripts:
+        - name: Upload to Google Drive
+          script: |
+            if [ -z "$GOOGLE_DRIVE_SERVICE_ACCOUNT" ] || [ -z "$GOOGLE_DRIVE_FOLDER_ID" ]; then
+              echo "‚ö†Ô∏è Google Drive not configured"
+              exit 0
+            fi
+            
+            IPA_FILE="flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa"
+            IPA_PATH="build/ios/ipa/$IPA_FILE"
+            ZIP_FILE="flutter_code_magic_ios_v${VERSION_NAME}+${VERSION_CODE}.zip"
+            
+            # Create ZIP file with IPA
+            echo "üì¶ Creating ZIP file..."
+            cd build/ios/ipa
+            zip "../../$ZIP_FILE" "$IPA_FILE"
+            cd ../../..
+            
+            # Install gdrive tool
+            curl -L https://github.com/gdrive-org/gdrive/releases/download/2.1.1/gdrive_2.1.1_darwin_amd64.tar.gz | tar xz
+            sudo mv gdrive /usr/local/bin/
+            chmod +x /usr/local/bin/gdrive
+            
+            # Upload ZIP to Google Drive
+            echo "$GOOGLE_DRIVE_SERVICE_ACCOUNT" > service-account.json
+            gdrive account add --service-account service-account.json
+            
+            echo "üì§ Uploading $ZIP_FILE to Google Drive..."
+            UPLOAD_OUTPUT=$(gdrive files upload "$ZIP_FILE" --parent "$GOOGLE_DRIVE_FOLDER_ID" --share 2>&1)
+            echo "Upload result: $UPLOAD_OUTPUT"
+            
+            # Extract file ID for direct download link
+            FILE_ID=$(echo "$UPLOAD_OUTPUT" | grep -o 'Id: [^[:space:]]*' | cut -d' ' -f2 | head -1)
+            if [ -n "$FILE_ID" ]; then
+              # Make file publicly accessible
+              gdrive files share "$FILE_ID" --type anyone --role reader
+              echo "DRIVE_LINK=https://drive.google.com/uc?export=download&id=$FILE_ID" >> $CM_ENV
+              echo "‚úÖ iOS ZIP uploaded and shared: $FILE_ID"
+              echo "üì• Direct download: https://drive.google.com/uc?export=download&id=$FILE_ID"
+            else
+              echo "DRIVE_LINK=https://drive.google.com/drive/folders/$GOOGLE_DRIVE_FOLDER_ID" >> $CM_ENV
+              echo "‚úÖ iOS ZIP uploaded (using folder link)"
+            fi
+        - name: Upload to Diawi
+          script: |
+            if [ -z "$DIAWI_TOKEN" ]; then
+              echo "‚ö†Ô∏è Diawi not configured"
+              exit 0
+            fi
+            
+            IPA_PATH="build/ios/ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa"
+            
+            # Upload to Diawi
+            RESPONSE=$(curl -X POST https://upload.diawi.com/ \
+              -F "token=$DIAWI_TOKEN" \
+              -F "file=@$IPA_PATH" \
+              -F "wall_of_apps=1")
+            
+            JOB_ID=$(echo "$RESPONSE" | grep -o '"job":"[^"]*"' | cut -d'"' -f4)
+            
+            if [ -n "$JOB_ID" ]; then
+              sleep 10
+              STATUS=$(curl -s "https://upload.diawi.com/status?token=$DIAWI_TOKEN&job=$JOB_ID")
+              LINK=$(echo "$STATUS" | grep -o '"link":"[^"]*"' | cut -d'"' -f4)
+              
+              if [ -n "$LINK" ]; then
+                echo "DIAWI_LINK=https://i.diawi.com/$LINK" >> $CM_ENV
+                echo "‚úÖ Diawi link: https://i.diawi.com/$LINK"
+              else
+                echo "DIAWI_LINK=Upload_failed" >> $CM_ENV
+                echo "‚ùå Failed to get Diawi link"
+              fi
+            else
+              echo "DIAWI_LINK=Upload_failed" >> $CM_ENV
+              echo "‚ùå Failed to upload to Diawi"
+            fi
+        - name: Send Slack notification
+          script: |
+            if [ -z "$SLACK_WEBHOOK_URL" ]; then
+              echo "‚ö†Ô∏è SLACK_WEBHOOK_URL not configured, skipping Slack notification"
+              exit 0
+            fi
+            
+            curl -X POST -H 'Content-type: application/json' \
+              --data "{
+                \"text\": \"üöÄ Flutter Code Magic iOS Build Completed\",
+                \"blocks\": [
+                  {
+                    \"type\": \"header\",
+                    \"text\": {
+                      \"type\": \"plain_text\",
+                      \"text\": \"üì± Flutter Code Magic iOS v${VERSION_NAME}+${VERSION_CODE}\"
+                    }
+                  },
+                  {
+                    \"type\": \"section\",
+                    \"fields\": [
+                      {
+                        \"type\": \"mrkdwn\",
+                        \"text\": \"*Platform:* iOS\"
+                      },
+                      {
+                        \"type\": \"mrkdwn\",
+                        \"text\": \"*Version:* ${VERSION_NAME}+${VERSION_CODE}\"
+                      },
+                      {
+                        \"type\": \"mrkdwn\",
+                        \"text\": \"*Branch:* ${CM_BRANCH}\"
+                      },
+                      {
+                        \"type\": \"mrkdwn\",
+                        \"text\": \"*Status:* ‚úÖ Success\"
+                      }
+                    ]
+                  },
+                  {
+                    \"type\": \"section\",
+                    \"text\": {
+                      \"type\": \"mrkdwn\",
+                      \"text\": \"üì• *Download Links:*\\n‚Ä¢ üì¶ *Google Drive:* ${DRIVE_LINK}\\n‚Ä¢ üì± *Diawi:* ${DIAWI_LINK:-Not available}\\n‚Ä¢ üóÇÔ∏è *IPA File:* flutter_code_magic_ios_v${VERSION_NAME}+${VERSION_CODE}.zip\"
+                    }
+                  }
+                ]
+              }" \
+              "$SLACK_WEBHOOK_URL"
+            
+            if [ $? -eq 0 ]; then
+              echo "‚úÖ Slack notification sent successfully"
+            else
+              echo "‚ùå Failed to send Slack notification"
+            fi
+
Index: android/app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/build.gradle.kts b/android/app/build.gradle.kts
--- a/android/app/build.gradle.kts	(revision 1fc353b801d30d291a859f6907427870e07211e8)
+++ b/android/app/build.gradle.kts	(revision 3a3d0fd22952a1e60361f6a8923302181500a303)
@@ -35,6 +35,19 @@
             // TODO: Add your own signing config for the release build.
             // Signing with the debug keys for now, so `flutter run --release` works.
             signingConfig = signingConfigs.getByName("debug")
+            
+            // Optimizations for faster builds
+            isMinifyEnabled = false
+            isShrinkResources = false
+            isDebuggable = false
+            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
+        }
+    }
+    
+    // Additional build optimizations
+    packagingOptions {
+        jniLibs {
+            useLegacyPackaging = false
         }
     }
 }
Index: android/gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/android/gradle.properties b/android/gradle.properties
--- a/android/gradle.properties	(revision 1fc353b801d30d291a859f6907427870e07211e8)
+++ b/android/gradle.properties	(revision 3a3d0fd22952a1e60361f6a8923302181500a303)
@@ -1,15 +1,33 @@
-org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=4G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError
+# Gradle JVM optimizations for maximum speed
+org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=4G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:+UseStringDeduplication
+
+# Android configuration
 android.useAndroidX=true
 android.enableJetifier=true
 
-# Additional Android build optimizations for faster builds
+# AGGRESSIVE BUILD OPTIMIZATIONS FOR SPEED
 org.gradle.daemon=true
 org.gradle.parallel=true
 org.gradle.configureondemand=true
-org.gradle.workers.max=4
 org.gradle.caching=true
+org.gradle.workers.max=8
+
+# Skip all unnecessary tasks for release builds
 android.enableR8.fullMode=false
-android.useAndroidX=true
-android.enableJetifier=true
+android.enableBuildCache=true
+android.enableD8.desugaring=false
+android.enableSeparateAnnotationProcessing=true
+
+# Kotlin optimizations
 kotlin.compiler.execution.strategy=in-process
 kotlin.incremental=true
+kotlin.incremental.multiplatform=true
+kotlin.caching.enabled=true
+
+# Skip non-essential build steps
+android.enableAapt2.jniDebugging=false
+android.debug.obsoleteApi=true
+
+# File system optimizations  
+org.gradle.vfs.watch=true
+org.gradle.unsafe.configuration-cache=true
\ No newline at end of file
Index: CREDENTIALS_CHECKLIST.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CREDENTIALS_CHECKLIST.md b/CREDENTIALS_CHECKLIST.md
--- a/CREDENTIALS_CHECKLIST.md	(revision 864a5db6382f4d50313d66c35f0de299a84db2bc)
+++ b/CREDENTIALS_CHECKLIST.md	(revision 817dc7aadbc26b97f7dd57fc927db9e61499fa8b)
@@ -1,88 +1,38 @@
 # üîë Codemagic Credentials Setup Checklist
 
-## ‚úÖ **Ready to Configure** (You have these)
-
-### üìÅ **Google Drive Folder IDs** ‚Üí `google_credentials` group
-```bash
-GOOGLE_DRIVE_DEMO_ANDROID_FOLDER_ID=1cOk2_gfl1Tlv6fuzTRa1e6-77CglMAOP
-GOOGLE_DRIVE_DEMO_IOS_FOLDER_ID=1KARIQrBFkdJRgOxhY3Si2UAV62TRj_LP
-GOOGLE_DRIVE_PROD_ANDROID_FOLDER_ID=1vXto-9QTNCB-DijFbNnRj-B4nzU9bYhp
-GOOGLE_DRIVE_PROD_IOS_FOLDER_ID=1jGiQflfwote8PboFIEK9raTM6X_m8kBs
-GOOGLE_DRIVE_STAGING_ANDROID_FOLDER_ID=1vXto-9QTNCB-DijFbNnRj-B4nzU9bYhp
-GOOGLE_DRIVE_STAGING_IOS_FOLDER_ID=1jGiQflfwote8PboFIEK9raTM6X_m8kBs
-```
+## ‚úÖ **COMPLETED - All Credentials Configured in Codemagic Dashboard**
 
-### üì≤ **Diawi Token** ‚Üí `diawi_credentials` group
-```bash
-DIAWI_TOKEN=1NAtEax0BNyeL1V3Jc5hC8kpFMigx3PcIo0gya4l9e
-```
+### üéØ **Environment Groups Successfully Set Up:**
 
-## üöß **Still Need to Setup**
+#### `google_credentials` group:
+- ‚úÖ GOOGLE_DRIVE_SERVICE_ACCOUNT (Service account JSON)
+- ‚úÖ GOOGLE_DRIVE_FOLDER_ID (1GNT1C0eOcg0hgsxr6lqIKx-LwZK77BBF)
 
-### üîê **Google Drive Service Account** ‚Üí `google_credentials` group
-```bash
-GOOGLE_DRIVE_SERVICE_ACCOUNT={paste_your_json_here}
-```
-**How to get:**
-1. Go to [Google Cloud Console](https://console.cloud.google.com)
-2. Create/select project ‚Üí Enable Google Drive API
-3. Create service account ‚Üí Download JSON key
-4. Share all your Google Drive folders with the service account email
+#### `slack_credentials` group:
+- ‚úÖ SLACK_WEBHOOK_URL (Webhook for #test_codemagic channel)
 
-### üí¨ **Slack Webhook** ‚Üí `slack_credentials` group
-```bash
-SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL
-```
-**How to get:**
-1. Go to your Slack workspace
-2. Create app ‚Üí Enable Incoming Webhooks
-3. Create webhook for your channel
-4. Copy the webhook URL
+#### `diawi_credentials` group:
+- ‚úÖ DIAWI_TOKEN (For iOS app distribution)
 
-### üè™ **Google Play Store** ‚Üí `google_play_credentials` group
-```bash
-GOOGLE_PLAY_SERVICE_ACCOUNT={play_store_json_here}
-```
-**How to get:**
-1. Go to [Google Play Console](https://play.google.com/console)
-2. Setup ‚Üí API access ‚Üí Create service account
-3. Download JSON key, grant permissions
+## üéØ **CI/CD Pipeline Status**
 
-### üçé **App Store Connect** ‚Üí `app_store_credentials` group
-```bash
-APP_STORE_CONNECT_ISSUER_ID=your_issuer_id
-APP_STORE_CONNECT_KEY_ID=your_key_id
-APP_STORE_CONNECT_PRIVATE_KEY=your_private_key
-```
-**How to get:**
-1. Go to [App Store Connect](https://appstoreconnect.apple.com)
-2. Users and Access ‚Üí Keys ‚Üí Create API key
-3. Download .p8 file, note Key ID and Issuer ID
-
-## üîß **Android Signing** (Already configured)
-Your keystore is already set up in `android/app/build.gradle`:
-- Keystore: `/Users/pranavnandhakumar/Projects/edge_credentials/abihbus_hpy.jks`
-- Alias: `abhibus.com`
-- Password: `AbhiBus#007`
-
-**In Codemagic:** Upload keystore as `abhibus_edge_keystore`
-
-## üìã **Setup Progress**
-
-- [x] Google Drive folder IDs
-- [x] Diawi token
-- [x] Android keystore info
-- [ ] Google Drive service account
-- [ ] Slack webhook
-- [ ] Google Play Store credentials
-- [ ] App Store Connect credentials
-- [ ] iOS certificates & provisioning profiles
+### ‚úÖ **FULLY CONFIGURED & READY**
+- [x] Google Drive folder ID
+- [x] Diawi token  
+- [x] Google Drive service account
+- [x] Slack webhook (#test_codemagic channel)
+- [x] All environment variables configured in Codemagic
 
-## üöÄ **Priority Order**
+### üöÄ **What Happens on Build:**
 
-1. **Google Drive Service Account** (required for file uploads)
-2. **Slack Webhook** (for notifications)
-3. **iOS Certificates** (for iOS builds)
-4. **Store Credentials** (for staging deployments only)
+#### **Android Workflow:**
+1. üì¶ Builds APK ‚Üí Creates ZIP ‚Üí Uploads to Google Drive
+2. üì≤ Sends Slack notification with download link
 
-Once you have the Google Drive service account, you can start testing your CI/CD pipeline!
+#### **iOS Workflow:**  
+1. üì¶ Builds IPA ‚Üí Creates ZIP ‚Üí Uploads to Google Drive
+2. üì± Uploads to Diawi for device installation
+3. üì≤ Sends Slack notification with both Google Drive and Diawi links
+
+### üéâ **Ready to Use!**
+Your CI/CD pipeline is fully operational. Push code to trigger builds and receive notifications in Slack!
Index: codemagic-test.yaml
===================================================================
diff --git a/codemagic-test.yaml b/codemagic-test.yaml
deleted file mode 100644
--- a/codemagic-test.yaml	(revision 243d651400f5c17219b7bb2dc46152ba99d38951)
+++ /dev/null	(revision 243d651400f5c17219b7bb2dc46152ba99d38951)
@@ -1,30 +0,0 @@
-workflows:
-  android-simple:
-    name: Android Simple Build
-    instance_type: mac_mini_m1
-    max_build_duration: 60
-    environment:
-      groups:
-        - google_credentials
-        - slack_credentials
-      vars:
-        PACKAGE_NAME: "com.example.flutter_code_magic"
-      flutter: stable
-      xcode: latest
-      cocoapods: default
-    triggering:
-      events:
-        - push
-      branch_patterns:
-        - pattern: 'main'
-          include: true
-          source: true
-    scripts:
-      - name: Get Flutter packages
-        script: |
-          flutter packages pub get
-      - name: Build APK
-        script: |
-          flutter build apk --debug
-    artifacts:
-      - build/app/outputs/flutter-apk/*.apk
Index: CODEMAGIC_SETUP.md
===================================================================
diff --git a/CODEMAGIC_SETUP.md b/CODEMAGIC_SETUP.md
deleted file mode 100644
--- a/CODEMAGIC_SETUP.md	(revision 7950eedc8960114d026a37df0b13321da10a3e22)
+++ /dev/null	(revision 7950eedc8960114d026a37df0b13321da10a3e22)
@@ -1,282 +0,0 @@
-# Codemagic CI/CD Setup Guide for Edge App
-
-This guide will help you configure Codemagic CI/CD for the Edge Flutter application with automated builds, testing, and deployment.
-
-## üèóÔ∏è Build Configuration Overview
-
-### Build Types
-1. **Demo Builds** (Testing)
-   - Version: 3.5.1+35
-   - Flavor: `demo`
-   - Platforms: Android, iOS, Web
-   - Deployment: Google Drive + Diawi (iOS)
-
-2. **Prod Builds** (Testing)
-   - Version: 3.5.1+35
-   - Flavor: `prod`
-   - Platforms: Android, iOS, Web
-   - Deployment: Google Drive + Diawi (iOS)
-
-3. **Staging Builds** (Store Ready)
-   - Version: 3.5.1+16
-   - Flavor: `prod`
-   - Platforms: Android, iOS, Web
-   - Deployment: Play Store + App Store + Google Drive + Diawi (iOS)
-
-### File Naming Convention
-- **Android APK**: `edge_{flavor}_v{version}+{code}.apk`
-  - Example: `edge_demo_v3.5.1+35.apk`
-- **Android AAB**: `edge_{flavor}_v{version}+{code}.aab`
-  - Example: `edge_staging_v3.5.1+16.aab`
-- **iOS IPA**: `edge_{flavor}_v{version}+{code}.ipa`
-  - Example: `edge_prod_v3.5.1+35.ipa`
-- **Web**: `edge_{flavor}_web_v{version}+{code}.tar.gz`
-  - Example: `edge_demo_web_v3.5.1+35.tar.gz`
-
-## üîß Codemagic Setup Instructions
-
-### 1. Connect Repository
-1. Log in to [Codemagic](https://codemagic.io)
-2. Connect your Git repository
-3. Import the project and detect the `codemagic.yaml` file
-
-### 2. Configure Environment Variables
-
-Navigate to **App Settings > Environment Variables** and add the following:
-
-#### Required Groups
-Create these environment variable groups:
-
-**google_credentials**
-- `GOOGLE_DRIVE_SERVICE_ACCOUNT` - Service account JSON for Google Drive API
-- `GOOGLE_DRIVE_DEMO_ANDROID_FOLDER_ID` - Google Drive folder ID for demo Android builds
-- `GOOGLE_DRIVE_DEMO_IOS_FOLDER_ID` - Google Drive folder ID for demo iOS builds
-- `GOOGLE_DRIVE_PROD_ANDROID_FOLDER_ID` - Google Drive folder ID for prod Android builds
-- `GOOGLE_DRIVE_PROD_IOS_FOLDER_ID` - Google Drive folder ID for prod iOS builds
-- `GOOGLE_DRIVE_STAGING_ANDROID_FOLDER_ID` - Google Drive folder ID for staging Android builds
-- `GOOGLE_DRIVE_STAGING_IOS_FOLDER_ID` - Google Drive folder ID for staging iOS builds
-
-**slack_credentials**
-- `SLACK_WEBHOOK_URL` - Slack webhook URL for notifications
-
-**diawi_credentials**
-- `DIAWI_TOKEN` - Diawi API token for iOS app distribution
-  - Your token: `1NAtEax0BNyeL1V3Jc5hC8kpFMigx3PcIo0gya4l9e`
-
-**google_play_credentials**
-- `GOOGLE_PLAY_SERVICE_ACCOUNT` - Service account JSON for Google Play Store API
-
-**app_store_credentials**
-- `APP_STORE_CONNECT_ISSUER_ID` - App Store Connect API issuer ID
-- `APP_STORE_CONNECT_KEY_ID` - App Store Connect API key ID
-- `APP_STORE_CONNECT_PRIVATE_KEY` - App Store Connect API private key
-
-### 3. Configure Code Signing
-
-#### Android Signing
-1. Go to **App Settings > Code Signing > Android**
-2. Upload your keystore file (`abihbus_hpy.jks`)
-3. Set the keystore alias name as: `abhibus_edge_keystore`
-4. Enter keystore password: `AbhiBus#007`
-5. Enter key alias: `abhibus.com`
-6. Enter key password: `AbhiBus#007`
-
-#### iOS Signing
-1. Go to **App Settings > Code Signing > iOS**
-2. Upload your certificates and provisioning profiles
-3. Configure for both Ad Hoc and App Store distribution
-4. Bundle ID: `com.abhibus.edge`
-
-### 4. Configure Webhooks (Optional)
-Set up webhooks for automatic builds:
-- **Demo builds**: Trigger on push to `demo/**` branches
-- **Prod builds**: Trigger on push to `prod/**` branches
-- **Staging builds**: Trigger on push to `staging/**` branches
-
-## üîë Setting Up Service Accounts
-
-### Google Drive API Setup
-1. Go to [Google Cloud Console](https://console.cloud.google.com)
-2. Create a new project or select existing
-3. Enable Google Drive API
-4. Create a service account
-5. Download the JSON key file
-6. Share your Google Drive folders with the service account email
-7. Copy the JSON content to `GOOGLE_DRIVE_SERVICE_ACCOUNT` variable
-
-### Google Play Store API Setup
-1. Go to [Google Play Console](https://play.google.com/console)
-2. Navigate to **Setup > API access**
-3. Create a service account
-4. Download the JSON key file
-5. Grant necessary permissions
-6. Copy the JSON content to `GOOGLE_PLAY_SERVICE_ACCOUNT` variable
-
-### App Store Connect API Setup
-1. Go to [App Store Connect](https://appstoreconnect.apple.com)
-2. Navigate to **Users and Access > Keys**
-3. Create a new API key
-4. Download the `.p8` file
-5. Note the Key ID and Issuer ID
-6. Set up the environment variables accordingly
-
-### Diawi Setup
-1. Go to [Diawi](https://www.diawi.com)
-2. Create an account
-3. Go to API settings
-4. Generate an API token
-5. Add it to `DIAWI_TOKEN` variable
-
-### Slack Webhook Setup
-1. Go to your Slack workspace
-2. Create a new app or use existing
-3. Enable Incoming Webhooks
-4. Create a webhook for your desired channel
-5. Copy the webhook URL to `SLACK_WEBHOOK_URL` variable
-
-## üìÅ Google Drive Folder Structure
-
-Create the following folder structure in Google Drive:
-```
-Edge App Builds/
-‚îú‚îÄ‚îÄ Demo/
-‚îú‚îÄ‚îÄ Prod/
-‚îî‚îÄ‚îÄ Staging/
-```
-
-Get the folder IDs from the URL when you open each folder and add them to the respective environment variables.
-
-**Your actual folder IDs:**
-- **Demo Android**: `1cOk2_gfl1Tlv6fuzTRa1e6-77CglMAOP`
-- **Demo iOS**: `1KARIQrBFkdJRgOxhY3Si2UAV62TRj_LP`
-- **Prod Android**: `1vXto-9QTNCB-DijFbNnRj-B4nzU9bYhp`
-- **Prod iOS**: `1jGiQflfwote8PboFIEK9raTM6X_m8kBs`
-- **Staging Android**: Use prod Android folder or create new
-- **Staging iOS**: Use prod iOS folder or create new
-
-### üîß **Environment Variables to Set in Codemagic:**
-
-Copy these exact values into your Codemagic `google_credentials` environment group:
-
-```bash
-# Your actual folder IDs - ready to copy/paste
-GOOGLE_DRIVE_DEMO_ANDROID_FOLDER_ID=1cOk2_gfl1Tlv6fuzTRa1e6-77CglMAOP
-GOOGLE_DRIVE_DEMO_IOS_FOLDER_ID=1KARIQrBFkdJRgOxhY3Si2UAV62TRj_LP
-GOOGLE_DRIVE_PROD_ANDROID_FOLDER_ID=1vXto-9QTNCB-DijFbNnRj-B4nzU9bYhp
-GOOGLE_DRIVE_PROD_IOS_FOLDER_ID=1jGiQflfwote8PboFIEK9raTM6X_m8kBs
-
-# For staging, you can reuse prod folders or create new ones
-GOOGLE_DRIVE_STAGING_ANDROID_FOLDER_ID=1vXto-9QTNCB-DijFbNnRj-B4nzU9bYhp
-GOOGLE_DRIVE_STAGING_IOS_FOLDER_ID=1jGiQflfwote8PboFIEK9raTM6X_m8kBs
-```
-
-## üöÄ Triggering Builds
-
-### Branch Naming Convention
-- **Demo builds**: Push to branches matching `demo/**`
-  - Example: `demo/feature-update`, `demo/v3.5.1`
-- **Prod builds**: Push to branches matching `prod/**`
-  - Example: `prod/release-candidate`, `prod/v3.5.1`
-- **Staging builds**: Push to branches matching `staging/**`
-  - Example: `staging/v3.5.1`, `staging/store-release`
-
-### Manual Builds
-You can also trigger builds manually from the Codemagic dashboard:
-1. Go to your app in Codemagic
-2. Select the desired workflow
-3. Click "Start new build"
-4. Choose the branch and any additional options
-
-## üì± Build Outputs
-
-### Demo & Prod Builds
-- ‚úÖ Build and test
-- ‚úÖ Upload to Google Drive
-- ‚úÖ Upload iOS to Diawi
-- ‚úÖ Send Slack notification
-- ‚ùå No store deployment
-
-### Staging Builds
-- ‚úÖ Build and test
-- ‚úÖ Upload to Google Drive
-- ‚úÖ Upload iOS to Diawi
-- ‚úÖ Deploy Android to Google Play Store (Internal track)
-- ‚úÖ Deploy iOS to App Store Connect (TestFlight)
-- ‚úÖ Send Slack notification
-
-## üîç Testing Pipeline
-
-Each build includes:
-1. **Flutter analyze** - Static code analysis
-2. **Flutter test** - Unit tests
-3. **Build validation** - File size and integrity checks
-4. **Basic APK/IPA validation** - Ensures builds are valid
-
-## üìß Slack Notifications
-
-Notifications include:
-- üöÄ Build completion status
-- üì± Platform and version information
-- üìÅ Google Drive links
-- üì≤ Diawi links (for iOS)
-- üè™ Store deployment status
-- üìä Build size information
-
-## üîß Troubleshooting
-
-### Common Issues
-
-1. **Build fails with "Flutter not found"**
-   - Ensure Flutter SDK is properly configured in Codemagic
-
-2. **iOS build fails with code signing errors**
-   - Verify certificates and provisioning profiles are correctly uploaded
-   - Check bundle ID matches in all configurations
-
-3. **Android build fails with keystore errors**
-   - Verify keystore file is uploaded with correct passwords
-   - Check keystore alias name matches configuration
-
-4. **Google Drive upload fails**
-   - Verify service account JSON is valid
-   - Ensure folders are shared with service account email
-   - Check folder IDs are correct
-
-5. **Diawi upload fails**
-   - Verify Diawi token is valid
-   - Check IPA file size (Diawi has limits)
-
-6. **Slack notifications not working**
-   - Verify webhook URL is correct
-   - Check webhook permissions in Slack
-
-### Build Size Optimization
-- Ensure `--release` flag is used for production builds
-- Consider using `--split-per-abi` for Android APKs if needed
-- Enable ProGuard/R8 for Android builds
-- Use `--tree-shake-icons` for Flutter builds
-
-## üìö Additional Resources
-
-- [Codemagic Documentation](https://docs.codemagic.io/)
-- [Flutter Build Documentation](https://flutter.dev/docs/deployment)
-- [Google Play Console Help](https://support.google.com/googleplay/android-developer/)
-- [App Store Connect Help](https://developer.apple.com/support/app-store-connect/)
-- [Diawi Documentation](https://www.diawi.com/docs)
-
-## üîÑ Maintenance
-
-### Regular Tasks
-1. Update version numbers in `codemagic.yaml` for releases
-2. Rotate API keys and certificates before expiration
-3. Monitor build times and optimize if needed
-4. Clean up old builds in Google Drive periodically
-5. Update Flutter SDK version as needed
-
-### Version Updates
-When updating app versions:
-1. Update `VERSION_NAME` and `VERSION_CODE` in `codemagic.yaml`
-2. Update version in `pubspec.yaml`
-3. Commit changes and push to trigger builds
-
-This setup provides a comprehensive CI/CD pipeline that handles building, testing, and distributing your Edge app across all platforms while maintaining clean file organization and proper notifications.
