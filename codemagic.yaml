# Flutter Code Magic - Codemagic CI/CD Configuration
#
# Required Environment Variables in Codemagic:
# 
# Google Drive Integration:
# - GOOGLE_DRIVE_SERVICE_ACCOUNT: Service account JSON for Google Drive API
#   Service Account Email: edge-app-cicd@codemagic-470112.iam.gserviceaccount.com
# - GOOGLE_DRIVE_FOLDER_ID: Google Drive folder ID where files will be uploaded
#   Folder ID: 1GNT1C0eOcg0hgsxr6lqIKx-LwZK77BBF
#
# Slack Integration:
# - SLACK_WEBHOOK_URL: Slack webhook URL for notifications
#
# Diawi Integration (iOS only):
# - DIAWI_TOKEN: Diawi API token for iOS app distribution
#
# Android Signing:
# - SKIPPED: Using debug signing for development builds
#
# iOS Signing:
# - SKIPPED: Using --no-codesign for development builds

workflows:
  # ANDROID BUILD WORKFLOW
  android-workflow:
    name: Android Build
    instance_type: mac_mini_m1
    max_build_duration: 60
    environment:
      groups:
        - google_credentials  # Optional: for Google Drive uploads
        - slack_credentials   # Optional: for Slack notifications
      vars:
        PACKAGE_NAME: "com.example.flutter_code_magic"
      flutter: stable
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: 'main'
          include: true
          source: true
        - pattern: 'develop'
          include: true
          source: true
        - pattern: 'feature/*'
          include: true
          source: true
    scripts:
      - name: Extract version from pubspec.yaml
        script: |
          # Extract version from pubspec.yaml
          FULL_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          VERSION_NAME=$(echo $FULL_VERSION | cut -d '+' -f 1)
          VERSION_CODE=$(echo $FULL_VERSION | cut -d '+' -f 2)
          
          echo "VERSION_NAME=$VERSION_NAME" >> $CM_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $CM_ENV
          
          echo "üì¶ Building version: $VERSION_NAME+$VERSION_CODE"
      - name: Set up local.properties
        script: |
          echo "flutter.versionName=$VERSION_NAME" > $CM_BUILD_DIR/android/local.properties
          echo "flutter.versionCode=$VERSION_CODE" >> $CM_BUILD_DIR/android/local.properties
      - name: Get Flutter packages
        script: |
          echo "üîß Getting Flutter packages..."
          flutter pub get
          echo "‚úÖ Flutter packages complete"
      - name: Check Android setup
        script: |
          echo "üîç Checking Android SDK setup..."
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          ls -la $ANDROID_HOME/build-tools/ || echo "No build-tools found"
          ls -la $ANDROID_HOME/platforms/ || echo "No platforms found"
      - name: Flutter analyze
        script: |
          flutter analyze
      - name: Flutter test
        script: |
          flutter test
      - name: Build APK
        script: |
          # Clean build cache first
          flutter clean
          flutter pub get
          
          # Check Flutter doctor
          flutter doctor -v
          
          # Try building APK with release mode but debug signing
          echo "Building APK..."
          flutter build apk --release --debug
          
          # If that fails, try debug mode
          if [ $? -ne 0 ]; then
            echo "Release build failed, trying debug mode..."
            flutter build apk --debug
          fi
          
          # Check what APK was created
          ls -la build/app/outputs/flutter-apk/
          
          # Find the APK file (could be app-debug.apk or app-release.apk)
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "Found app-release.apk"
            echo "APK_NAME=app-release.apk" >> $CM_ENV
          elif [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "Found app-debug.apk"
            echo "APK_NAME=app-debug.apk" >> $CM_ENV
          else
            echo "No APK found!"
            exit 1
          fi
      - name: Rename APK
        script: |
          cd build/app/outputs/flutter-apk
          # Use the APK name detected in previous step
          mv $APK_NAME flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk
          echo "‚úÖ Renamed $APK_NAME to flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk"
      - name: Test APK (Basic validation)
        script: |
          APK_PATH="build/app/outputs/flutter-apk/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk"
          if [ -f "$APK_PATH" ]; then
            SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH" 2>/dev/null)
            if [ $SIZE -gt 5000000 ]; then  # > 5MB
              echo "‚úÖ APK validation passed - Size: $(($SIZE/1024/1024))MB"
            else
              echo "‚ùå APK validation failed - Size too small: $(($SIZE/1024/1024))MB"
              exit 1
            fi
          else
            echo "‚ùå APK not found at $APK_PATH"
            exit 1
          fi
      - name: Upload to Google Drive
        script: |
          # Install gdrive CLI tool
          curl -L https://github.com/gdrive-org/gdrive/releases/download/2.1.1/gdrive_2.1.1_darwin_amd64.tar.gz | tar xz
          sudo mv gdrive /usr/local/bin/
          
          # Authenticate with service account
          echo "$GOOGLE_DRIVE_SERVICE_ACCOUNT" > service-account.json
          gdrive account add --service-account service-account.json
          
          # Upload APK and get file ID
          UPLOAD_OUTPUT=$(gdrive files upload build/app/outputs/flutter-apk/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk --parent $GOOGLE_DRIVE_FOLDER_ID)
          FILE_ID=$(echo "$UPLOAD_OUTPUT" | grep "Uploaded" | awk '{print $2}')
          DRIVE_LINK="https://drive.google.com/file/d/$FILE_ID/view"
          echo "DRIVE_LINK=$DRIVE_LINK" >> $CM_ENV
          echo "‚úÖ APK uploaded to Google Drive: $DRIVE_LINK"
      - name: Send Slack notification
        script: |
          APK_PATH="build/app/outputs/flutter-apk/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk"
          SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH" 2>/dev/null)
          SIZE_MB=$(($SIZE/1024/1024))
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"üöÄ *Flutter Code Magic Android Build Completed*\",
              \"blocks\": [
                {
                  \"type\": \"header\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"üì± Flutter Code Magic Android v${VERSION_NAME}+${VERSION_CODE}\"
                  }
                },
                {
                  \"type\": \"section\",
                  \"fields\": [
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Platform:* Android\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Version:* ${VERSION_NAME}+${VERSION_CODE}\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Size:* ${SIZE_MB}MB\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Branch:* $CM_BRANCH\"
                    }
                  ]
                },
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"üìÅ *Google Drive:* <$DRIVE_LINK|Download APK>\\nüì± *File:* flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk\"
                  }
                }
              ]
            }" \
            $SLACK_WEBHOOK_URL
    artifacts:
      - build/app/outputs/flutter-apk/*.apk

  # iOS BUILD WORKFLOW
  ios-workflow:
    name: iOS Build
    instance_type: mac_mini_m1
    max_build_duration: 60
    environment:
      groups:
        - google_credentials  # Optional: for Google Drive uploads
        - slack_credentials   # Optional: for Slack notifications
        - diawi_credentials   # Optional: for Diawi distribution
      vars:
        PACKAGE_NAME: "com.example.flutterCodeMagic"
        BUNDLE_ID: "com.example.flutterCodeMagic"
      flutter: stable
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: 'main'
          include: true
          source: true
        - pattern: 'develop'
          include: true
          source: true
        - pattern: 'feature/*'
          include: true
          source: true
    scripts:
      - name: Extract version from pubspec.yaml
        script: |
          # Extract version from pubspec.yaml
          FULL_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          VERSION_NAME=$(echo $FULL_VERSION | cut -d '+' -f 1)
          VERSION_CODE=$(echo $FULL_VERSION | cut -d '+' -f 2)
          
          echo "VERSION_NAME=$VERSION_NAME" >> $CM_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $CM_ENV
          
          echo "üì¶ Building version: $VERSION_NAME+$VERSION_CODE"
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Install CocoaPods dependencies
        script: |
          cd ios && pod install
      - name: Flutter analyze
        script: |
          flutter analyze
      - name: Flutter test
        script: |
          flutter test
      - name: Build iOS
        script: |
          flutter build ios --release --no-codesign
          xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release -archivePath build/ios/Runner.xcarchive archive CODE_SIGNING_ALLOWED=NO
      - name: Package IPA
        script: |
          xcodebuild -exportArchive -archivePath build/ios/Runner.xcarchive -exportOptionsPlist ios/ExportOptions.plist -exportPath build/ios/ipa
          mv build/ios/ipa/Runner.ipa build/ios/ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa
      - name: Test IPA (Basic validation)
        script: |
          IPA_PATH="build/ios/ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa"
          if [ -f "$IPA_PATH" ]; then
            SIZE=$(stat -f%z "$IPA_PATH" 2>/dev/null || stat -c%s "$IPA_PATH" 2>/dev/null)
            if [ $SIZE -gt 5000000 ]; then  # > 5MB
              echo "‚úÖ IPA validation passed - Size: $(($SIZE/1024/1024))MB"
            else
              echo "‚ùå IPA validation failed - Size too small: $(($SIZE/1024/1024))MB"
              exit 1
            fi
          else
            echo "‚ùå IPA not found at $IPA_PATH"
            exit 1
          fi
      - name: Upload to Google Drive
        script: |
          # Install gdrive CLI tool
          curl -L https://github.com/gdrive-org/gdrive/releases/download/2.1.1/gdrive_2.1.1_darwin_amd64.tar.gz | tar xz
          sudo mv gdrive /usr/local/bin/
          
          # Authenticate with service account
          echo "$GOOGLE_DRIVE_SERVICE_ACCOUNT" > service-account.json
          gdrive account add --service-account service-account.json
          
          # Upload IPA and get file ID
          UPLOAD_OUTPUT=$(gdrive files upload build/ios/ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa --parent $GOOGLE_DRIVE_FOLDER_ID)
          FILE_ID=$(echo "$UPLOAD_OUTPUT" | grep "Uploaded" | awk '{print $2}')
          DRIVE_LINK="https://drive.google.com/file/d/$FILE_ID/view"
          echo "DRIVE_LINK=$DRIVE_LINK" >> $CM_ENV
          echo "‚úÖ IPA uploaded to Google Drive: $DRIVE_LINK"
      - name: Upload to Diawi
        script: |
          IPA_PATH="build/ios/ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa"
          
          # Upload to Diawi
          RESPONSE=$(curl -F "token=$DIAWI_TOKEN" \
                          -F "file=@$IPA_PATH" \
                          -F "find_by_udid=1" \
                          -F "wall_of_apps=1" \
                          https://upload.diawi.com/)
          
          JOB_ID=$(echo $RESPONSE | grep -o '"job":"[^"]*' | cut -d'"' -f4)
          echo "Diawi Job ID: $JOB_ID"
          
          # Wait for upload to complete and get link
          sleep 30
          for i in {1..10}; do
            STATUS_RESPONSE=$(curl -s https://upload.diawi.com/status?token=$DIAWI_TOKEN\&job=$JOB_ID)
            if echo $STATUS_RESPONSE | grep -q '"status":2000'; then
              DIAWI_LINK=$(echo $STATUS_RESPONSE | grep -o '"link":"[^"]*' | cut -d'"' -f4)
              echo "DIAWI_LINK=$DIAWI_LINK" >> $CM_ENV
              break
            fi
            sleep 10
          done
      - name: Send Slack notification
        script: |
          IPA_PATH="build/ios/ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa"
          SIZE=$(stat -f%z "$IPA_PATH" 2>/dev/null || stat -c%s "$IPA_PATH" 2>/dev/null)
          SIZE_MB=$(($SIZE/1024/1024))
          
          DIAWI_TEXT=""
          if [ ! -z "$DIAWI_LINK" ]; then
            DIAWI_TEXT="üì≤ *Diawi Link:* <$DIAWI_LINK|Install on Device>\\n"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"üöÄ *Flutter Code Magic iOS Build Completed*\",
              \"blocks\": [
                {
                  \"type\": \"header\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"üì± Flutter Code Magic iOS v${VERSION_NAME}+${VERSION_CODE}\"
                  }
                },
                {
                  \"type\": \"section\",
                  \"fields\": [
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Platform:* iOS\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Version:* ${VERSION_NAME}+${VERSION_CODE}\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Size:* ${SIZE_MB}MB\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Branch:* $CM_BRANCH\"
                    }
                  ]
                },
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"üìÅ *Google Drive:* <$DRIVE_LINK|Download IPA>\\n${DIAWI_TEXT}üì± *File:* flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa\"
                  }
                }
              ]
            }" \
            $SLACK_WEBHOOK_URL
    artifacts:
      - build/ios/ipa/*.ipa

  # WEB BUILD WORKFLOW
  web-workflow:
    name: Web Build
    instance_type: mac_mini_m1
    max_build_duration: 60
    environment:
      groups:
        - google_credentials  # Optional: for Google Drive uploads
        - slack_credentials   # Optional: for Slack notifications
      vars:
        PACKAGE_NAME: "com.example.flutter_code_magic"
      flutter: stable
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: 'main'
          include: true
          source: true
        - pattern: 'develop'
          include: true
          source: true
        - pattern: 'feature/*'
          include: true
          source: true
    scripts:
      - name: Extract version from pubspec.yaml
        script: |
          # Extract version from pubspec.yaml
          FULL_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          VERSION_NAME=$(echo $FULL_VERSION | cut -d '+' -f 1)
          VERSION_CODE=$(echo $FULL_VERSION | cut -d '+' -f 2)
          
          echo "VERSION_NAME=$VERSION_NAME" >> $CM_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $CM_ENV
          
          echo "üì¶ Building version: $VERSION_NAME+$VERSION_CODE"
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Flutter analyze
        script: |
          flutter analyze
      - name: Flutter test
        script: |
          flutter test
      - name: Build Web
        script: |
          flutter build web --release
      - name: Package Web Build
        script: |
          cd build/web
          tar -czf ../flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz .
      - name: Test Web Build
        script: |
          WEB_PATH="build/flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz"
          if [ -f "$WEB_PATH" ]; then
            SIZE=$(stat -f%z "$WEB_PATH" 2>/dev/null || stat -c%s "$WEB_PATH" 2>/dev/null)
            if [ $SIZE -gt 500000 ]; then  # > 500KB
              echo "‚úÖ Web build validation passed - Size: $(($SIZE/1024/1024))MB"
            else
              echo "‚ùå Web build validation failed - Size too small: $(($SIZE/1024))KB"
              exit 1
            fi
          else
            echo "‚ùå Web build not found at $WEB_PATH"
            exit 1
          fi
      - name: Upload to Google Drive
        script: |
          # Install gdrive CLI tool
          curl -L https://github.com/gdrive-org/gdrive/releases/download/2.1.1/gdrive_2.1.1_darwin_amd64.tar.gz | tar xz
          sudo mv gdrive /usr/local/bin/
          # Authenticate with service account
          echo "$GOOGLE_DRIVE_SERVICE_ACCOUNT" > service-account.json
          gdrive account add --service-account service-account.json
          
          # Upload Web build
          gdrive files upload build/flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz --parent $GOOGLE_DRIVE_FOLDER_ID
      - name: Send Slack notification
        script: |
          WEB_PATH="build/flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz"
          SIZE=$(stat -f%z "$WEB_PATH" 2>/dev/null || stat -c%s "$WEB_PATH" 2>/dev/null)
          SIZE_MB=$(($SIZE/1024/1024))
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"üöÄ *Flutter Code Magic Web Build Completed*\",
              \"blocks\": [
                {
                  \"type\": \"header\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"üåê Flutter Code Magic Web v${VERSION_NAME}+${VERSION_CODE}\"
                  }
                },
                {
                  \"type\": \"section\",
                  \"fields\": [
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Platform:* Web\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Version:* ${VERSION_NAME}+${VERSION_CODE}\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Size:* ${SIZE_MB}MB\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Branch:* $CM_BRANCH\"
                    }
                  ]
                },
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"üìÅ *Google Drive:* Web build uploaded successfully\\nüåê *File:* flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz\"
                  }
                }
              ]
            }" \
            $SLACK_WEBHOOK_URL
    artifacts:
      - build/*.tar.gz

  # COMBINED BUILD WORKFLOW (All platforms)
  all-platforms:
    name: Build All Platforms
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      groups:
        - google_credentials  # Optional
        - slack_credentials   # Optional
        - diawi_credentials   # Optional
      vars:
        PACKAGE_NAME: "com.example.flutter_code_magic"
        BUNDLE_ID: "com.example.flutterCodeMagic"
      flutter: stable
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - tag  # Trigger on version tags
      tag_patterns:
        - pattern: 'v*'
          include: true
    scripts:
      - name: Extract version from pubspec.yaml
        script: |
          FULL_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          VERSION_NAME=$(echo $FULL_VERSION | cut -d '+' -f 1)
          VERSION_CODE=$(echo $FULL_VERSION | cut -d '+' -f 2)
          
          echo "VERSION_NAME=$VERSION_NAME" >> $CM_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $CM_ENV
          
          echo "üì¶ Building all platforms for version: $VERSION_NAME+$VERSION_CODE"
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Flutter analyze
        script: |
          flutter analyze
      - name: Flutter test
        script: |
          flutter test
      - name: Build Android APK
        script: |
          echo "flutter.versionName=$VERSION_NAME" > $CM_BUILD_DIR/android/local.properties
          echo "flutter.versionCode=$VERSION_CODE" >> $CM_BUILD_DIR/android/local.properties
          flutter build apk --release
          cd build/app/outputs/flutter-apk
          mv app-release.apk flutter_code_magic_android_v${VERSION_NAME}+${VERSION_CODE}.apk
      - name: Build iOS
        script: |
          cd ios && pod install && cd ..
          flutter build ios --release --no-codesign
          xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release -archivePath build/ios/Runner.xcarchive archive CODE_SIGNING_ALLOWED=NO
          xcodebuild -exportArchive -archivePath build/ios/Runner.xcarchive -exportOptionsPlist ios/ExportOptions.plist -exportPath build/ios/ipa
          mv build/ios/ipa/Runner.ipa build/ios/ipa/flutter_code_magic_ios_v${VERSION_NAME}+${VERSION_CODE}.ipa
      - name: Build Web
        script: |
          flutter build web --release
          cd build/web
          tar -czf ../flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz .
      - name: Validate All Builds
        script: |
          echo "‚úÖ Validating all builds..."
          # Validate Android APK
          APK_PATH="build/app/outputs/flutter-apk/flutter_code_magic_android_v${VERSION_NAME}+${VERSION_CODE}.apk"
          if [ -f "$APK_PATH" ]; then
            SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH" 2>/dev/null)
            echo "‚úÖ Android APK: $(($SIZE/1024/1024))MB"
          else
            echo "‚ùå Android APK not found"
            exit 1
          fi
          
          # Validate iOS IPA
          IPA_PATH="build/ios/ipa/flutter_code_magic_ios_v${VERSION_NAME}+${VERSION_CODE}.ipa"
          if [ -f "$IPA_PATH" ]; then
            SIZE=$(stat -f%z "$IPA_PATH" 2>/dev/null || stat -c%s "$IPA_PATH" 2>/dev/null)
            echo "‚úÖ iOS IPA: $(($SIZE/1024/1024))MB"
          else
            echo "‚ùå iOS IPA not found"
            exit 1
          fi
          
          # Validate Web build
          WEB_PATH="build/flutter_code_magic_web_v${VERSION_NAME}+${VERSION_CODE}.tar.gz"
          if [ -f "$WEB_PATH" ]; then
            SIZE=$(stat -f%z "$WEB_PATH" 2>/dev/null || stat -c%s "$WEB_PATH" 2>/dev/null)
            echo "‚úÖ Web build: $(($SIZE/1024/1024))MB"
          else
            echo "‚ùå Web build not found"
            exit 1
          fi
          
          echo "üéâ All platforms built successfully!"
    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/ios/ipa/*.ipa
      - build/*.tar.gz