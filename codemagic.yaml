# Codemagic Configuration for Flutter Code Magic
# Documentation: https://docs.codemagic.io/
#
# üìã CREDENTIALS: See CREDENTIALS_CHECKLIST.md for all required environment variables
# üîß SETUP: Configure environment groups in Codemagic dashboard before running builds

workflows:
  # ANDROID BUILD WORKFLOW
  android-workflow:
    name: Android Build
    instance_type: mac_mini_m2
    max_build_duration: 60
    environment:
      groups:
        - google_credentials  # GOOGLE_DRIVE_SERVICE_ACCOUNT, GOOGLE_DRIVE_FOLDER_ID
        - slack_credentials   # SLACK_WEBHOOK_URL (for custom integration)
      vars:
        PACKAGE_NAME: "com.example.flutter_code_magic"
      flutter: stable
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: 'main'
          include: true
          source: true
        - pattern: 'develop'
          include: true
          source: true
    scripts:
      - name: Extract version from pubspec.yaml
        script: |
          FULL_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          VERSION_NAME=$(echo $FULL_VERSION | cut -d '+' -f 1)
          VERSION_CODE=$(echo $FULL_VERSION | cut -d '+' -f 2)
          echo "VERSION_NAME=$VERSION_NAME" >> $CM_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $CM_ENV
          echo "üì¶ Building version: $VERSION_NAME+$VERSION_CODE"
      - name: Build APK
        script: |
          flutter build apk --release
          cd build/app/outputs/flutter-apk
          if [ -f "app-release.apk" ]; then
            mv app-release.apk flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk
            echo "‚úÖ APK renamed successfully"
          else
            echo "‚ùå APK not found"
            exit 1
          fi
          cd ../../../..
    artifacts:
      - build/app/outputs/flutter-apk/*.apk
    publishing:
      # OFFICIAL CODEMAGIC SLACK INTEGRATION
      slack:
        channel: '#general'  # Replace with your channel
        notify_on_build_start: true
        notify:
          success: true
          failure: true
      # CUSTOM GOOGLE DRIVE UPLOAD SCRIPT
      scripts:
        - name: Upload to Google Drive
          script: |
            if [ -z "$GOOGLE_DRIVE_SERVICE_ACCOUNT" ] || [ -z "$GOOGLE_DRIVE_FOLDER_ID" ]; then
              echo "‚ö†Ô∏è Google Drive not configured"
              exit 0
            fi
            
            APK_FILE="flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.apk"
            APK_PATH="build/app/outputs/flutter-apk/$APK_FILE"
            ZIP_FILE="flutter_code_magic_android_v${VERSION_NAME}+${VERSION_CODE}.zip"
            
            # Create ZIP file with APK
            echo "üì¶ Creating ZIP file..."
            cd build/app/outputs/flutter-apk
            zip "../../../$ZIP_FILE" "$APK_FILE"
            cd ../../../..
            
            # Install gdrive tool
            curl -L https://github.com/gdrive-org/gdrive/releases/download/2.1.1/gdrive_2.1.1_darwin_amd64.tar.gz | tar xz
            sudo mv gdrive /usr/local/bin/
            chmod +x /usr/local/bin/gdrive
            
            # Upload ZIP to Google Drive
            echo "$GOOGLE_DRIVE_SERVICE_ACCOUNT" > service-account.json
            gdrive account add --service-account service-account.json
            
            echo "üì§ Uploading $ZIP_FILE to Google Drive..."
            UPLOAD_OUTPUT=$(gdrive files upload "$ZIP_FILE" --parent "$GOOGLE_DRIVE_FOLDER_ID" --share 2>&1)
            echo "Upload result: $UPLOAD_OUTPUT"
            
            # Extract file ID for direct download link
            FILE_ID=$(echo "$UPLOAD_OUTPUT" | grep -o 'Id: [^[:space:]]*' | cut -d' ' -f2 | head -1)
            if [ -n "$FILE_ID" ]; then
              # Make file publicly accessible
              gdrive files share "$FILE_ID" --type anyone --role reader
              echo "DRIVE_LINK=https://drive.google.com/uc?export=download&id=$FILE_ID" >> $CM_ENV
              echo "‚úÖ Android ZIP uploaded and shared: $FILE_ID"
              echo "üì• Direct download: https://drive.google.com/uc?export=download&id=$FILE_ID"
            else
              echo "DRIVE_LINK=https://drive.google.com/drive/folders/$GOOGLE_DRIVE_FOLDER_ID" >> $CM_ENV
              echo "‚úÖ Android ZIP uploaded (using folder link)"
            fi

  # iOS BUILD WORKFLOW  
  ios-workflow:
    name: iOS Build
    instance_type: mac_mini_m2
    max_build_duration: 60
    environment:
      groups:
        - google_credentials
        - slack_credentials
        - diawi_credentials  # DIAWI_TOKEN
      vars:
        PACKAGE_NAME: "com.example.flutterCodeMagic"
        BUNDLE_ID: "com.example.flutterCodeMagic"
      flutter: stable
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: 'main'
          include: true
          source: true
        - pattern: 'develop'
          include: true
          source: true
    scripts:
      - name: Extract version from pubspec.yaml
        script: |
          FULL_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          VERSION_NAME=$(echo $FULL_VERSION | cut -d '+' -f 1)
          VERSION_CODE=$(echo $FULL_VERSION | cut -d '+' -f 2)
          echo "VERSION_NAME=$VERSION_NAME" >> $CM_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $CM_ENV
          echo "üì¶ Building version: $VERSION_NAME+$VERSION_CODE"
      - name: Build iOS
        script: |
          flutter build ios --release --no-codesign
          mkdir -p build/ios/ipa
          cd build/ios/Release-iphoneos/
          zip -r ../ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa Runner.app
          cd ../../../..
          echo "‚úÖ iOS IPA created"
    artifacts:
      - build/ios/ipa/*.ipa
    publishing:
      # OFFICIAL CODEMAGIC SLACK INTEGRATION
      slack:
        channel: '#general'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
      # CUSTOM SCRIPTS FOR GOOGLE DRIVE AND DIAWI
      scripts:
        - name: Upload to Google Drive
          script: |
            if [ -z "$GOOGLE_DRIVE_SERVICE_ACCOUNT" ] || [ -z "$GOOGLE_DRIVE_FOLDER_ID" ]; then
              echo "‚ö†Ô∏è Google Drive not configured"
              exit 0
            fi
            
            IPA_FILE="flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa"
            IPA_PATH="build/ios/ipa/$IPA_FILE"
            ZIP_FILE="flutter_code_magic_ios_v${VERSION_NAME}+${VERSION_CODE}.zip"
            
            # Create ZIP file with IPA
            echo "üì¶ Creating ZIP file..."
            cd build/ios/ipa
            zip "../../$ZIP_FILE" "$IPA_FILE"
            cd ../../..
            
            # Install gdrive tool
            curl -L https://github.com/gdrive-org/gdrive/releases/download/2.1.1/gdrive_2.1.1_darwin_amd64.tar.gz | tar xz
            sudo mv gdrive /usr/local/bin/
            chmod +x /usr/local/bin/gdrive
            
            # Upload ZIP to Google Drive
            echo "$GOOGLE_DRIVE_SERVICE_ACCOUNT" > service-account.json
            gdrive account add --service-account service-account.json
            
            echo "üì§ Uploading $ZIP_FILE to Google Drive..."
            UPLOAD_OUTPUT=$(gdrive files upload "$ZIP_FILE" --parent "$GOOGLE_DRIVE_FOLDER_ID" --share 2>&1)
            echo "Upload result: $UPLOAD_OUTPUT"
            
            # Extract file ID for direct download link
            FILE_ID=$(echo "$UPLOAD_OUTPUT" | grep -o 'Id: [^[:space:]]*' | cut -d' ' -f2 | head -1)
            if [ -n "$FILE_ID" ]; then
              # Make file publicly accessible
              gdrive files share "$FILE_ID" --type anyone --role reader
              echo "DRIVE_LINK=https://drive.google.com/uc?export=download&id=$FILE_ID" >> $CM_ENV
              echo "‚úÖ iOS ZIP uploaded and shared: $FILE_ID"
              echo "üì• Direct download: https://drive.google.com/uc?export=download&id=$FILE_ID"
            else
              echo "DRIVE_LINK=https://drive.google.com/drive/folders/$GOOGLE_DRIVE_FOLDER_ID" >> $CM_ENV
              echo "‚úÖ iOS ZIP uploaded (using folder link)"
            fi
        - name: Upload to Diawi
          script: |
            if [ -z "$DIAWI_TOKEN" ]; then
              echo "‚ö†Ô∏è Diawi not configured"
              exit 0
            fi
            
            IPA_PATH="build/ios/ipa/flutter_code_magic_v${VERSION_NAME}+${VERSION_CODE}.ipa"
            
            # Upload to Diawi
            RESPONSE=$(curl -X POST https://upload.diawi.com/ \
              -F "token=$DIAWI_TOKEN" \
              -F "file=@$IPA_PATH" \
              -F "wall_of_apps=1")
            
            JOB_ID=$(echo "$RESPONSE" | grep -o '"job":"[^"]*"' | cut -d'"' -f4)
            
            if [ -n "$JOB_ID" ]; then
              sleep 10
              STATUS=$(curl -s "https://upload.diawi.com/status?token=$DIAWI_TOKEN&job=$JOB_ID")
              LINK=$(echo "$STATUS" | grep -o '"link":"[^"]*"' | cut -d'"' -f4)
              
              if [ -n "$LINK" ]; then
                echo "‚úÖ Diawi link: https://i.diawi.com/$LINK"
              else
                echo "‚ùå Failed to get Diawi link"
              fi
            else
              echo "‚ùå Failed to upload to Diawi"
            fi

